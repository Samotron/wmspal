name: CI Build

on:
  push:
    branches: [ main, copilot/* ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            triplet: x64-linux
            artifact_name: wmspal-linux-x64
            cmake_preset: linux-x64
          - os: windows-latest
            triplet: x64-windows-static
            artifact_name: wmspal-windows-x64.exe
            cmake_preset: windows-x64

    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup vcpkg
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgGitCommitId: '7476f0d4e77d3333fbb249657df8251c28c4faae'

    - name: Setup CMake and Ninja
      uses: lukka/get-cmake@latest

    - name: Configure and build
      uses: lukka/run-cmake@v10
      with:
        configurePreset: ${{ matrix.cmake_preset }}
        buildPreset: ${{ matrix.cmake_preset }}

    - name: Test executable exists
      shell: bash
      run: |
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          ls -la build/${{ matrix.cmake_preset }}/Release/wmspal.exe
          file build/${{ matrix.cmake_preset }}/Release/wmspal.exe
        else
          ls -la build/${{ matrix.cmake_preset }}/wmspal
          file build/${{ matrix.cmake_preset }}/wmspal
        fi

    - name: Package binary
      shell: bash
      run: |
        mkdir -p dist
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          cp build/${{ matrix.cmake_preset }}/Release/wmspal.exe dist/${{ matrix.artifact_name }}
        else
          cp build/${{ matrix.cmake_preset }}/wmspal dist/${{ matrix.artifact_name }}
          strip dist/${{ matrix.artifact_name }} || true
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: dist/${{ matrix.artifact_name }}