name: Cross-Platform Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

env:
  VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            triplet: x64-linux
            artifact_name: wmspal-linux-x64
            cmake_preset: linux-x64
          - os: ubuntu-latest
            triplet: arm64-linux
            artifact_name: wmspal-linux-arm64
            cmake_preset: linux-arm64
          - os: windows-latest
            triplet: x64-windows-static
            artifact_name: wmspal-windows-x64.exe
            cmake_preset: windows-x64
          - os: macos-latest
            triplet: x64-osx
            artifact_name: wmspal-macos-x64
            cmake_preset: macos-x64
          - os: macos-latest
            triplet: arm64-osx
            artifact_name: wmspal-macos-arm64
            cmake_preset: macos-arm64

    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup vcpkg
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgGitCommitId: '1de2026f28ead93ff1773e6e680387643e914ea1'

    - name: Setup CMake and Ninja
      uses: lukka/get-cmake@latest

    - name: Install cross-compilation tools (Linux ARM64)
      if: matrix.triplet == 'arm64-linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

    - name: Configure and build
      uses: lukka/run-cmake@v10
      with:
        configurePreset: ${{ matrix.cmake_preset }}
        buildPreset: ${{ matrix.cmake_preset }}

    - name: Package binary
      shell: bash
      run: |
        mkdir -p dist
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          cp build/${{ matrix.cmake_preset }}/Release/wmspal.exe dist/${{ matrix.artifact_name }}
        else
          cp build/${{ matrix.cmake_preset }}/wmspal dist/${{ matrix.artifact_name }}
          strip dist/${{ matrix.artifact_name }} || true
        fi
        
        # Create archive
        cd dist
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          7z a ${{ matrix.artifact_name }}.zip ${{ matrix.artifact_name }}
        else
          tar -czf ${{ matrix.artifact_name }}.tar.gz ${{ matrix.artifact_name }}
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: dist/${{ matrix.artifact_name }}.*

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: artifacts/**/*
        draft: false
        prerelease: ${{ contains(github.ref, '-') }}
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}